<ResourceDictionary x:Class="EMDR.Controls.ControlsDictionary"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:sys="clr-namespace:System;assembly=mscorlib"
		xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
		xmlns:ACHelpers="clr-namespace:AppCore.Helpers;assembly=AppCore"
		>

	<LinearGradientBrush x:Key="SymbolGradientBrush" EndPoint="0.5,1" StartPoint="0.5,0">
		<GradientStop Color="#FF5A5A5A" Offset="0"/>
		<GradientStop Color="#FF212021" Offset="1"/>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="GradientBrush" EndPoint="0.5,1" StartPoint="0.5,0">
		<GradientStop Color="#FF5A5A5A" Offset="0"/>
		<GradientStop Color="#FF212021" Offset="1"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="BasicGradientBackground" EndPoint="0.504,1.5" StartPoint="0.504,0.03" >
		<GradientStop Color="WhiteSmoke" Offset="0" />
		<GradientStop Color="Black" Offset="0.67" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="SymbolGradientBackground" EndPoint="1,0.5" StartPoint="0,0.5" >
		<GradientStop Color="WhiteSmoke" Offset="0" />
		<GradientStop Color="Blue" Offset="0.137" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="AccountGradientBackground" EndPoint="1,0.5" StartPoint="0,0.5" >
		<GradientStop Color="WhiteSmoke" Offset="0" />
		<GradientStop Color="Blue" Offset="0.137" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="IBAccountGradientBackground" EndPoint="1,0.5" StartPoint="0,0.5" >
		<GradientStop Color="LightSeaGreen" Offset="0.775" />
		<GradientStop Color="WhiteSmoke" Offset="1" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="ConditionGradientBackground" EndPoint="1,0.5" StartPoint="0,0.5" >
		<GradientStop Color="WhiteSmoke" Offset="0" />
		<GradientStop Color="LightGray" Offset="0.137" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="PriceControlGridGradientBackground" EndPoint="1,0.5" StartPoint="0,0.5" >
		<GradientStop Color="WhiteSmoke" Offset="0" />
		<GradientStop Color="LightBlue" Offset="0.137" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="PMGridGradientBackground" EndPoint="0.5,1" StartPoint="0.5,0">
		<GradientStop Color="Black" Offset="0"/>
		<GradientStop Color="White" Offset="1"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="IndicatorControlsStackGridGradientBackground" EndPoint="0.5,1" StartPoint="0.5,0">
		<GradientStop Color="Black" Offset="0"/>
		<GradientStop Color="White" Offset="1"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="VerticalUpBarGradientBackground" EndPoint="1,0.5" StartPoint="0,0.5" >
		<GradientStop Color="LightSeaGreen" Offset="0.775" />
		<GradientStop Color="WhiteSmoke" Offset="1" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="VerticalDownBarGradientBackground" EndPoint="1,0.5" StartPoint="0,0.5">
		<GradientStop Color="Tomato" Offset="0.775" />
		<GradientStop Color="WhiteSmoke" Offset="1" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="VerticalUpBarValueGradientBackground" EndPoint="1,0.5" StartPoint="0,0.5" 
		ColorInterpolationMode="ScRgbLinearInterpolation" 
		SpreadMethod="Reflect" >
		<GradientStop Color="Green" Offset="0.775" />
		<GradientStop Color="White" Offset="1" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="VerticalDownBarValueGradientBackground" EndPoint="1,0.5" StartPoint="0,0.5" 
		ColorInterpolationMode="ScRgbLinearInterpolation" 
		SpreadMethod="Reflect" >
		<GradientStop Color="Red" Offset="0.775" />
		<GradientStop Color="White" Offset="1" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="VerticalUpBarOutsideLimitsBackground" EndPoint="1,0.5" StartPoint="0,0.5">
		<GradientStop Color="LightGray" Offset="0.775" />
		<GradientStop Color="WhiteSmoke" Offset="1" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="VerticalDownBarOutsideLimitsBackground" EndPoint="1,0.5" StartPoint="0,0.5">
		<GradientStop Color="LightGray" Offset="0.775" />
		<GradientStop Color="WhiteSmoke" Offset="1" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="MomentumPositiveBG" EndPoint="1,0.5" StartPoint="0,0.5" >
		<GradientStop Color="WhiteSmoke" Offset="0.01" />
		<GradientStop Color="Green" Offset="1" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="MomentumNegativeBG" EndPoint="1,0.5" StartPoint="0,0.5" >
		<GradientStop Color="Red" Offset="0.25" />
		<GradientStop Color="WhiteSmoke" Offset="1" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="ProximityLevelAboveMatch" EndPoint="0.5,1" StartPoint="0.5,0" >
		<GradientStop Color="Green" Offset="0.25" />
		<GradientStop Color="WhiteSmoke" Offset="1" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="ProximityLevelAboveHigh" EndPoint="0.5,1" StartPoint="0.5,0" >
		<GradientStop Color="LightGreen" Offset="0.25" />
		<GradientStop Color="WhiteSmoke" Offset="1" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="ProximityLevelAboveMedium" EndPoint="0.5,1" StartPoint="0.5,0" >
		<GradientStop Color="LightCyan" Offset="0.25" />
		<GradientStop Color="WhiteSmoke" Offset="1" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="ProximityLevelAboveLow" EndPoint="0.5,1" StartPoint="0.5,0" >
		<GradientStop Color="LightYellow" Offset="0.25" />
		<GradientStop Color="WhiteSmoke" Offset="1" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="ProximityLevelNone" EndPoint="1,0.5" StartPoint="0,0.5" >
		<GradientStop Color="Black" Offset="0.25" />
		<GradientStop Color="WhiteSmoke" Offset="1" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="ProximityLevelBelowLow" EndPoint="0.5,0" StartPoint="0.5,1" >
		<GradientStop Color="LightYellow" Offset="0.25" />
		<GradientStop Color="WhiteSmoke" Offset="1" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="ProximityLevelBelowMedium" EndPoint="0.5,0" StartPoint="0.5,1" >
		<GradientStop Color="LightCoral" Offset="0.25" />
		<GradientStop Color="WhiteSmoke" Offset="1" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="ProximityLevelBelowHigh" EndPoint="0.5,0" StartPoint="0.5,1" >
		<GradientStop Color="Tomato" Offset="0.25" />
		<GradientStop Color="WhiteSmoke" Offset="1" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="ProximityLevelBelowMatch" EndPoint="0.5,0" StartPoint="0.5,1" >
		<GradientStop Color="Red" Offset="0.15" />
		<GradientStop Color="WhiteSmoke" Offset="1" />
	</LinearGradientBrush>

	<Geometry x:Key="ComboBoxArrow">M-0,6 L-0,8 8,8 8,-0 6,-0 6,6 z</Geometry>

	<Color x:Key="SelectedBackgroundColor">#FFC5CBF9</Color>
	<Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>

	<Color x:Key="ControlLightColor">White</Color>
	<Color x:Key="ControlMediumColor">#FF7381F9</Color>
	<Color x:Key="ControlDarkColor">#FF211AA9</Color>

	<Color x:Key="ControlMouseOverColor">#FF3843C4</Color>
	<Color x:Key="ControlPressedColor">#FF211AA9</Color>

	<!--Colors-->
	<!--<Color x:Key="WindowBackgroundColor">Black</Color>-->
	<Color x:Key="WindowBackgroundColor">#444444</Color>
	<Color x:Key="DarkBackgroundColor">#333333</Color>
	<Color x:Key="LightBackgroundColor">#595959</Color>
	<Color x:Key="BackgroundColor">#3D3D3D</Color>
	<Color x:Key="DisabledBackgroundColor">#424242</Color>
	<Color x:Key="LightDisabledBackgroundColor">#666666</Color>

	<Color x:Key="ForegroundColor">#EFEFEF</Color>

	<Color x:Key="HighlightColor">#BDBDBD</Color>
	<Color x:Key="HotColor">#525252</Color>

	<SolidColorBrush x:Key="ComboBoxButtonNormalBackground" Color="#808080"/>
	<SolidColorBrush x:Key="ComboBoxForegroundBrush" Color="White"/>

	<SolidColorBrush x:Key="ButtonNormalBackground" Color="{StaticResource DarkBackgroundColor}"/>
	<SolidColorBrush x:Key="ButtonNormalBorder" Color="#4C4C4C"/>

	<SolidColorBrush x:Key="ButtonForeground" Color="{StaticResource ForegroundColor}"/>
	<SolidColorBrush x:Key="MouseOverButtonForeground" Color="#1B1B1B"/>
	<SolidColorBrush x:Key="ButtonBackground" Color="{StaticResource LightBackgroundColor}"/>
	<SolidColorBrush x:Key="ButtonBorder" Color="{StaticResource DarkBackgroundColor}"/>
	<SolidColorBrush x:Key="PressedButtonBackground" Color="{StaticResource DisabledBackgroundColor}"/>
	<SolidColorBrush x:Key="MouseOverButtonBackground" Color="#AAAAAA"/>
	<SolidColorBrush x:Key="DisabledButtonBackground" Color="{StaticResource LightDisabledBackgroundColor}"/>
	<SolidColorBrush x:Key="DisabledButtonForeground" Color="{StaticResource DisabledBackgroundColor}"/>
	<SolidColorBrush x:Key="SelectedListItem" Color="{StaticResource HighlightColor}"/>

	<SolidColorBrush x:Key="SolidBrush" Color="#FF212021"/>
	<SolidColorBrush x:Key="SolidBlackBrush" Color="#FF000000"/>
	<SolidColorBrush x:Key="SolidWhiteBrush" Color="#FFFFFFFF"/>

	<SolidColorBrush x:Key="ToggleBorderBrush" Color="#6000FF00" />
	<SolidColorBrush x:Key="ToggleBackgroundBrush"	Color="#2000FF00"/>

	<!-- ******************** Button ********************-->
	<Style x:Key="RoundedButtonStyle1" TargetType="{x:Type Button}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Foreground" Value="Black" />
		<Setter Property="FontWeight" Value="DemiBold" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Border CornerRadius="3" Background="LightCyan" BorderThickness=".5">
						<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ******************** ContextMenu ********************-->
	<Style x:Key="ContextMenuItemStyle" TargetType="{x:Type MenuItem}">
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Margin" Value="0,0,0,0" />
		<Setter Property="Background" Value="Black" />
		<Setter Property="Foreground" Value="White" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type MenuItem}">
					<Border BorderThickness="1" CornerRadius="4" BorderBrush="Black" x:Name="Border" Background="Black">
						<StackPanel ClipToBounds="True" Orientation="Vertical" IsItemsHost="True" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="Border" Property="Background" Value="Black" />
							<Setter Property="Background" Value="{StaticResource SolidBlackBrush}"/>
							<Setter Property="Foreground" Value="{StaticResource SolidWhiteBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ContextMenuStyle" TargetType="{x:Type ContextMenu}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Margin" Value="-20,0,0,0" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Background" Value="{StaticResource SolidBlackBrush}"/>
		<Setter Property="Foreground" Value="{StaticResource SolidWhiteBrush}"/>
		<Setter Property="HasDropShadow" Value="True" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource ContextMenuItemStyle}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ContextMenu}">
					<Border BorderThickness="1" CornerRadius="4" BorderBrush="Black" x:Name="Border" Background="Black">
						<StackPanel ClipToBounds="True" Orientation="Vertical" IsItemsHost="True" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="Border" Property="Background" Value="Black" />
							<Setter Property="Background" Value="{StaticResource SolidBlackBrush}"/>
							<Setter Property="Foreground" Value="{StaticResource SolidWhiteBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="TabItem">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TabItem">
					<Border Name="Border" BorderThickness="1,1,1,0" 
									BorderBrush="Gainsboro" CornerRadius="2,2,0,0" Margin="1,0">
						<ContentPresenter x:Name="ContentSite"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        ContentSource="Header"
                                        Margin="10,2"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="Border" Property="Background" Value="LightGreen" />
						</Trigger>
						<Trigger Property="IsSelected" Value="False">
							<Setter TargetName="Border" Property="Background" Value="GhostWhite" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<sys:Double x:Key="SymbolWidth">44</sys:Double>
    <sys:Double x:Key="PriceWidth">55</sys:Double>
    <sys:Double x:Key="PnLWidth">65</sys:Double>
    <sys:Double x:Key="IntValueWidth">55</sys:Double>
	<sys:Double x:Key="AccountNameWidth">78</sys:Double>

	<Style x:Key="LookAtMe" TargetType="TextBlock">
		<Setter Property="Background" Value="Transparent"/>
		<Style.Triggers>
			<EventTrigger RoutedEvent="Binding.TargetUpdated">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<ColorAnimation Storyboard.TargetProperty="(TextBlock.Background).(SolidColorBrush.Color)"
                                                From="Transparent" To="Magenta" FillBehavior="Stop"
                                                BeginTime="0:0:0" Duration="0:0:0.3"/>
							<ColorAnimation Storyboard.TargetProperty="(TextBlock.Background).(SolidColorBrush.Color)"
                                                From="Magenta" To="Transparent"
                                                BeginTime="0:0:0.3" Duration="0:0:1"/>
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>
		</Style.Triggers>
	</Style>

	<!-- ******************** ComboBox ********************-->
	<!-- ComboBox -->
	<Style x:Key="ComboBoxFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="2,2,21,2" SnapsToDevicePixels="true"
						Stroke="{StaticResource ComboBoxForegroundBrush}"
						StrokeThickness="1"
						StrokeDashArray="1 2"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ComboBoxReadonlyToggleButton" TargetType="{x:Type ToggleButton}">
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="IsTabStop" Value="false"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="ClickMode" Value="Press"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border  
						CornerRadius="3"             
						BorderBrush="{TemplateBinding BorderBrush}" 
						Background="{TemplateBinding Background}" 
						SnapsToDevicePixels="true">
						<Border x:Name="PopUpButton"
							HorizontalAlignment="Right"
							Background="{DynamicResource ComboBoxButtonNormalBackground}"
							CornerRadius="3"
							Margin="1"
							Width="15">
							<Path x:Name="Arrow" Data="{StaticResource ComboBoxArrow}" 
								HorizontalAlignment="Center" 
								VerticalAlignment="Center"
								Width="5.5"
								Height="5.5" 
								Stretch="Fill" 
								Fill="{DynamicResource ButtonForeground}"
                                RenderTransformOrigin="0.5,0.5" 
                                Margin="0,4,0,7">
								<Path.RenderTransform>
									<TransformGroup>
										<ScaleTransform/>
										<SkewTransform/>
										<RotateTransform Angle="45"/>
										<TranslateTransform/>
									</TransformGroup>
								</Path.RenderTransform>
							</Path>
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" TargetName="PopUpButton" Value="{DynamicResource MouseOverButtonBackground}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource DisabledButtonForeground}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type ComboBox}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource ComboBoxFocusVisual}"/>
		<Setter Property="Foreground" Value="{DynamicResource ButtonForeground}"/>
		<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
		<Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
		<Setter Property="Padding" Value="5,3,5,1"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
		<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
		<Setter Property="ItemContainerStyle" Value="{DynamicResource ComboBoxItemStyle}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<Grid x:Name="MainGrid" SnapsToDevicePixels="true">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition MinWidth="18" Width="Auto"/>
						</Grid.ColumnDefinitions>
						<Popup x:Name="PART_Popup" 
							AllowsTransparency="true" 
							Grid.ColumnSpan="2"
							IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" 
							Margin="1" 
							PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" 
							Placement="Bottom">
							<Border x:Name="Shdw" 
								Background="Transparent" 
								MaxHeight="{TemplateBinding MaxDropDownHeight}" 
								MinWidth="{Binding ActualWidth, ElementName=MainGrid}">
								<Border x:Name="DropDownBorder" 
									BorderBrush="{TemplateBinding BorderBrush}" 
									BorderThickness="1" 
									Background="{TemplateBinding Background}">
									<ScrollViewer x:Name="DropDownScrollViewer" 
										>
										<Grid RenderOptions.ClearTypeHint="Enabled">
											<Canvas HorizontalAlignment="Left" 
												Height="0" 
												VerticalAlignment="Top" 
												Width="0">
												<Rectangle x:Name="OpaqueRect" 
													Fill="{Binding Background, ElementName=DropDownBorder}" 
													Height="{Binding ActualHeight, ElementName=DropDownBorder}" 
													Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
											</Canvas>
											<ItemsPresenter x:Name="ItemsPresenter" 
												KeyboardNavigation.DirectionalNavigation="Contained" 
												SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
										</Grid>
									</ScrollViewer>
								</Border>
							</Border>
						</Popup>
						<ToggleButton BorderBrush="{TemplateBinding BorderBrush}" 
							Background="{TemplateBinding Background}" 
							Grid.ColumnSpan="2" 
							IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
							Style="{StaticResource ComboBoxReadonlyToggleButton}"/>
						<ContentPresenter ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
							ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
							Content="{TemplateBinding SelectionBoxItem}" 
							ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" 
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
							IsHitTestVisible="false" 
							Margin="{TemplateBinding Padding}" 
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
							<Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
							<Setter Property="Background" TargetName="Shdw" Value="#71000000"/>
						</Trigger>
						<Trigger Property="HasItems" Value="false">
							<Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource TextBoxDisabledForeground}"/>
							<Setter Property="Background" Value="{DynamicResource TextBoxDisabledBackground}"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsGrouping" Value="true"/>
								<!--<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>-->
							</MultiTrigger.Conditions>
							<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
						</MultiTrigger>
						<Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
							<Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
							<Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsEditable" Value="true">
				<!--<Setter Property="BorderBrush" Value="{StaticResource TextBoxBorder2}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>-->
				<Setter Property="IsTabStop" Value="false"/>
				<Setter Property="Padding" Value="3"/>
				<Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
		<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="Padding" Value="3,0,3,0"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsHighlighted" Value="true">
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource SelectedListItem}"/>
							<Setter Property="Foreground" Value="WhiteSmoke"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ******************** ProgressBar ********************-->
	<LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill" EndPoint="0,0" MappingMode="Absolute" StartPoint="-100,0">
		<GradientStop Color="#00000000" Offset="0"/>
		<GradientStop Color="#FF000000" Offset="0.4"/>
		<GradientStop Color="#FF000000" Offset="0.6"/>
		<GradientStop Color="#00000000" Offset="1"/>
	</LinearGradientBrush>
	<SolidColorBrush x:Key="ProgressBarTopHighlight" Color="#80FFFFFF" />
	<!-- progress bar style -->
	<Style x:Key="FlatProgressBar" TargetType="{x:Type ProgressBar}">
		<Setter Property="Foreground" Value="#01D328"/>
		<Setter Property="Background" Value="Black"/>
		<Setter Property="BorderBrush" Value="Black"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ProgressBar}">
					<Grid x:Name="Background" SnapsToDevicePixels="true">
						<Rectangle Fill="{TemplateBinding Background}" RadiusY="2" RadiusX="2"/>
						<Border Background="{x:Null}" CornerRadius="2" Margin="1"/>
						<Border BorderBrush="#80FFFFFF" BorderThickness="1,0,1,1" Background="{StaticResource ProgressBarTopHighlight}" Margin="1"/>
						<Rectangle x:Name="PART_Track" Margin="1"/>
						<Decorator x:Name="PART_Indicator" HorizontalAlignment="Left" Margin="1">
							<Grid x:Name="Foreground">
								<Grid.ColumnDefinitions>
									<ColumnDefinition MaxWidth="15"/>
									<ColumnDefinition Width="0.1*"/>
									<ColumnDefinition MaxWidth="15"/>
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition/>
									<RowDefinition/>
								</Grid.RowDefinitions>
								<Rectangle x:Name="Indicator" Grid.ColumnSpan="3" Fill="{TemplateBinding Foreground}" Grid.RowSpan="2"/>
								<Rectangle x:Name="Animation" Grid.ColumnSpan="3" Fill="{TemplateBinding Foreground}" Grid.RowSpan="2">
									<Rectangle.OpacityMask>
										<MultiBinding>
											<MultiBinding.Converter>
												<Themes:ProgressBarHighlightConverter/>
											</MultiBinding.Converter>
											<Binding Source="{StaticResource ProgressBarIndicatorAnimatedFill}"/>
											<Binding ElementName="Background" Path="ActualWidth"/>
											<Binding ElementName="Background" Path="ActualHeight"/>
										</MultiBinding>
									</Rectangle.OpacityMask>
								</Rectangle>
							</Grid>
						</Decorator>
						<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="Orientation" Value="Vertical">
							<Setter Property="LayoutTransform" TargetName="Background">
								<Setter.Value>
									<RotateTransform Angle="-90"/>
								</Setter.Value>
							</Setter>
							<Setter Property="LayoutTransform" TargetName="PART_Track">
								<Setter.Value>
									<RotateTransform Angle="90"/>
								</Setter.Value>
							</Setter>
							<Setter Property="LayoutTransform" TargetName="PART_Indicator">
								<Setter.Value>
									<RotateTransform Angle="90"/>
								</Setter.Value>
							</Setter>
							<Setter Property="LayoutTransform" TargetName="Foreground">
								<Setter.Value>
									<RotateTransform Angle="-90"/>
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="IsIndeterminate" Value="true">
							<Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="IsIndeterminate" Value="false">
							<Setter Property="Fill" TargetName="Animation" Value="#80B5FFA9"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ******************** ToolTip ********************-->
	<Style x:Key="{x:Type ToolTip}" TargetType="ToolTip">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource Self}, Path=PlacementTarget.FontFamily}"/>
		<Setter Property="HasDropShadow" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToolTip">
					<Border Name="Border"
						BorderThickness="1"
						Width="{TemplateBinding Width}"
						Height="{TemplateBinding Height}">
						<Border.Background>
							<LinearGradientBrush StartPoint="0,0"
                                 EndPoint="0,1">
								<LinearGradientBrush.GradientStops>
									<GradientStopCollection>
										<GradientStop Color="#FF5A5A5A"
											Offset="0.0" />
										<GradientStop Color="#FF212021"
											Offset="1.0" />
									</GradientStopCollection>
								</LinearGradientBrush.GradientStops>
							</LinearGradientBrush>
						</Border.Background>
						<Border.BorderBrush>
							<SolidColorBrush Color="WhiteSmoke" />
						</Border.BorderBrush>
						<ContentPresenter Margin="4"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Top"
							/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="HasDropShadow" Value="true">
							<Setter TargetName="Border"
								Property="CornerRadius"
								Value="4" />
							<Setter TargetName="Border"
								Property="SnapsToDevicePixels"
								Value="true" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ******************** ImageToolTip ********************-->
	<Style x:Key="ImageToolTip" TargetType="ToolTip">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="FontFamily" Value="Arial, Path=PlacementTarget.FontFamily}"/>
		<Setter Property="HasDropShadow" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToolTip">
					<Border Name="Border"
						BorderThickness="1"
						Width="{TemplateBinding Width}"
						Height="{TemplateBinding Height}">
						<Border.Background>
							<LinearGradientBrush StartPoint="0,0"
                                 EndPoint="0,1">
								<LinearGradientBrush.GradientStops>
									<GradientStopCollection>
										<GradientStop Color="#FF5A5A5A"
											Offset="0.0" />
										<GradientStop Color="#FF212021"
											Offset="1.0" />
									</GradientStopCollection>
								</LinearGradientBrush.GradientStops>
							</LinearGradientBrush>
						</Border.Background>
						<Border.BorderBrush>
							<SolidColorBrush Color="WhiteSmoke" />
						</Border.BorderBrush>
						<ContentPresenter Margin="4"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Top"
							/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="HasDropShadow" Value="true">
							<Setter TargetName="Border"
								Property="CornerRadius"
								Value="4" />
							<Setter TargetName="Border"
								Property="SnapsToDevicePixels"
								Value="true" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ******************** Button ********************-->
	<Style x:Key="ButtonStyle2" TargetType="{x:Type Button}" BasedOn="{StaticResource RoundedButtonStyle1}">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
		<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<!-- We use Grid as a root because it is easy to add more elements to customize the button -->
					<Grid x:Name="Grid">
						<Border x:Name="Border" Background="{TemplateBinding Background}"
								   BorderBrush="{TemplateBinding BorderBrush}"
								   BorderThickness="{TemplateBinding BorderThickness}"
								   Padding="{TemplateBinding Padding}"/>

						<!-- Content Presenter is where the text content etc is placed by the control -->
						<!-- The bindings are useful so that the control can be parameterized without editing the template -->

						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    Margin="{TemplateBinding Padding}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    RecognizesAccessKey="True"/>
					</Grid>

					<!--Each state sets a brush on the Border in the template -->
					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
						</Trigger>

						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="{DynamicResource MouseOverBrush}" TargetName="Border"/>
						</Trigger>

						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
						</Trigger>

						<Trigger Property="IsEnabled" Value="true"/>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
							<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
						</Trigger>

					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--<Style x:Key="Win10ItemStyle" TargetType="{x:Type TreeView}">
		<Style.Resources>
			<SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#CBE8F6" />
			<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#F6F6F6" />
			<SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />
			<SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Black" />
		</Style.Resources>
	</Style>
	<Style TargetType="{x:Type TreeViewItem}">
		<Setter Property="BorderThickness" Value="1" />
		<Style.Triggers>
			<Trigger Property="IsSelected" Value="True">
				<Setter Property="BorderBrush" Value="#26A0DA" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="ACHelpers:TreeViewItemHelper.IsMouseDirectlyOverItem" Value="True" />
					<Condition Property="IsSelected" Value="False" />
				</MultiTrigger.Conditions>
				<Setter Property="Background" Value="#E5F3FB" />
				<Setter Property="BorderBrush" Value="#70C0E7" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelected" Value="True" />
					<Condition Property="IsSelectionActive" Value="False" />
				</MultiTrigger.Conditions>
				<Setter Property="BorderBrush" Value="#DADADA" />
			</MultiTrigger>
		</Style.Triggers>
	</Style>-->

	<ControlTemplate x:Key="RemoveXButtonTemplate" TargetType="Button">
	    <Border Width="18" Height="18" Background="#00000000" Margin="2,0,2,0">

		<!-- YAYA
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="FocusStates">
          <VisualState x:Name="Unfocused"/>
          <VisualState x:Name="Focused"/>
        </VisualStateGroup>
        <VisualStateGroup x:Name="CommonStates">
          <VisualStateGroup.Transitions>
            <VisualTransition GeneratedDuration="00:00:00.1000000"/>
          </VisualStateGroup.Transitions>
          <VisualState x:Name="MouseOver">
            <Storyboard>
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="path1" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Normal"/>
          <VisualState x:Name="Pressed">
            <Storyboard>
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="path1" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Disabled"/>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
		-->
      <Grid RenderTransformOrigin="0.5,0.5">
        <Grid.RenderTransform>
          <TransformGroup>
            <ScaleTransform/>
            <SkewTransform/>
            <RotateTransform Angle="45"/>
            <TranslateTransform/>
          </TransformGroup>
        </Grid.RenderTransform>
        
        <Path x:Name="path1" Height="16" Width="16" RenderTransformOrigin="0.5,0.5" Fill="{x:Null}" Stretch="Fill" Stroke="#FF606060" StrokeThickness="1" Data="M7.5,1.5 L10.5,1.5 L10.5,7.5 L16.5,7.5 L16.5,10.5 L10.5,10.5 L10.5,16.5 L7.5,16.5 L7.5,10.5 L1.5,10.5 L1.5,7.5 L7.5,7.5 z" Margin="1,-1,1,3">
          <Path.RenderTransform>
            <TransformGroup>
              <ScaleTransform/>
              <SkewTransform/>
              <RotateTransform Angle="-90"/>
              <TranslateTransform Y="2" X="0"/>
            </TransformGroup>
          </Path.RenderTransform>
        </Path>
        
        <Path x:Name="path" Height="16" Width="16" RenderTransformOrigin="0.5,0.5" Stroke="#FFD60808" Fill="#FFD60808" Stretch="Fill" Data="M7.5,1.5 L10.5,1.5 L10.5,7.5 L16.5,7.5 L16.5,10.5 L10.5,10.5 L10.5,16.5 L7.5,16.5 L7.5,10.5 L1.5,10.5 L1.5,7.5 L7.5,7.5 z" Opacity="0" StrokeThickness="0" Margin="1,-1,1,3">
          <Path.RenderTransform>
            <TransformGroup>
              <ScaleTransform/>
              <SkewTransform/>
              <RotateTransform Angle="-90"/>
              <TranslateTransform Y="2" X="0"/>
            </TransformGroup>
          </Path.RenderTransform>
        </Path>
      </Grid>
    </Border>
  </ControlTemplate>

</ResourceDictionary>

<ResourceDictionary x:Class="MatrixTrader.Windows.WindowsDictionary"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:sys="clr-namespace:System;assembly=mscorlib"
        xmlns:MT="clr-namespace:MatrixTrader"
	>

    <sys:Double x:Key="SymbolWidth">44</sys:Double>
    <sys:Double x:Key="PriceWidth">55</sys:Double>
    <sys:Double x:Key="PnLWidth">65</sys:Double>
    <sys:Double x:Key="IntValueWidth">55</sys:Double>
    <sys:Double x:Key="AccountNameWidth">78</sys:Double>

    <Color x:Key="SelectedBackgroundColor">#FFC5CBF9</Color>
	<Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>

	<Color x:Key="ControlLightColor">White</Color>
	<Color x:Key="ControlMediumColor">#FF7381F9</Color>
	<Color x:Key="ControlDarkColor">#FF211AA9</Color>

	<Color x:Key="ControlMouseOverColor">#FF3843C4</Color>
	<Color x:Key="ControlPressedColor">#FF211AA9</Color>

    <Color x:Key="DarkBackgroundColor">#333333</Color>
    <Color x:Key="LightBackgroundColor">#595959</Color>
    <Color x:Key="BackgroundColor">#3D3D3D</Color>
    <Color x:Key="DisabledBackgroundColor">#424242</Color>
    <Color x:Key="LightDisabledBackgroundColor">#666666</Color>

    <Color x:Key="ForegroundColor">#EFEFEF</Color>

    <SolidColorBrush x:Key="ButtonForeground" Color="{StaticResource ForegroundColor}"/>
    <SolidColorBrush x:Key="MouseOverButtonForeground" Color="#1B1B1B"/>
    <SolidColorBrush x:Key="ButtonBackground" Color="{StaticResource LightBackgroundColor}"/>
    <SolidColorBrush x:Key="ButtonBorder" Color="{StaticResource DarkBackgroundColor}"/>
    <SolidColorBrush x:Key="PressedButtonBackground" Color="{StaticResource DisabledBackgroundColor}"/>
    <SolidColorBrush x:Key="MouseOverButtonBackground" Color="#AAAAAA"/>
    <SolidColorBrush x:Key="DisabledButtonBackground" Color="{StaticResource LightDisabledBackgroundColor}"/>
    <SolidColorBrush x:Key="DisabledButtonForeground" Color="{StaticResource DisabledBackgroundColor}"/>

    <SolidColorBrush x:Key="SolidBrush" Color="#FF212021"/>
    <SolidColorBrush x:Key="SolidBlackBrush" Color="#FF000000"/>
    <SolidColorBrush x:Key="SolidWhiteBrush" Color="#FFFFFFFF"/>

    <SolidColorBrush x:Key="ToggleBorderBrush" Color="#6000FF00" />
    <SolidColorBrush x:Key="ToggleBackgroundBrush"	Color="#2000FF00"/>

    <SolidColorBrush x:Key="ComboBoxButtonNormalBackground" Color="#808080"/>
    <SolidColorBrush x:Key="ComboBoxForegroundBrush" Color="White"/>

    <LinearGradientBrush x:Key="GradientBrush" EndPoint="0.5,1" StartPoint="0.5,0">
		<GradientStop Color="#FF5A5A5A" Offset="0"/>
		<GradientStop Color="#FF212021" Offset="1"/>
	</LinearGradientBrush>
	<!--<LinearGradientBrush x:Key="GradientBrush" EndPoint="0.504,1.5" StartPoint="0.504,0.03" >
		<GradientStop Color="WhiteSmoke" Offset="0" />
		<GradientStop Color="Black" Offset="0.67" />
	</LinearGradientBrush>-->
	<LinearGradientBrush x:Key="BasicGradientBackground" EndPoint="0.504,1.5" StartPoint="0.504,0.03" >
		<GradientStop Color="WhiteSmoke" Offset="0" />
		<GradientStop Color="Black" Offset="0.67" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="SymbolGradientBackground" EndPoint="1,0.5" StartPoint="0,0.5" >
		<GradientStop Color="WhiteSmoke" Offset="0" />
		<GradientStop Color="Blue" Offset="0.137" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="AccountGradientBackground" EndPoint="1,0.5" StartPoint="0,0.5" >
		<GradientStop Color="WhiteSmoke" Offset="0" />
		<GradientStop Color="Blue" Offset="0.137" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="IBAccountGradientBackground" EndPoint="1,0.5" StartPoint="0,0.5" >
		<GradientStop Color="LightSeaGreen" Offset="0.775" />
		<GradientStop Color="WhiteSmoke" Offset="1" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="ConditionGradientBackground" EndPoint="1,0.5" StartPoint="0,0.5" >
		<GradientStop Color="WhiteSmoke" Offset="0" />
		<GradientStop Color="LightGray" Offset="0.137" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="PriceControlGridGradientBackground" EndPoint="1,0.5" StartPoint="0,0.5" >
		<GradientStop Color="WhiteSmoke" Offset="0" />
		<GradientStop Color="LightBlue" Offset="0.137" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="PMGridGradientBackground" EndPoint="0.5,1" StartPoint="0.5,0">
		<GradientStop Color="Black" Offset="0"/>
		<GradientStop Color="White" Offset="1"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="IndicatorControlsStackGridGradientBackground" EndPoint="0.5,1" StartPoint="0.5,0">
		<GradientStop Color="Black" Offset="0"/>
		<GradientStop Color="White" Offset="1"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="VerticalUpBarGradientBackground" EndPoint="1,0.5" StartPoint="0,0.5" >
		<GradientStop Color="LightSeaGreen" Offset="0.775" />
		<GradientStop Color="WhiteSmoke" Offset="1" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="VerticalDownBarGradientBackground" EndPoint="1,0.5" StartPoint="0,0.5">
		<GradientStop Color="LightSeaGreen" Offset="0.775" />
		<GradientStop Color="WhiteSmoke" Offset="1" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="VerticalUpBarValueGradientBackground" EndPoint="1,0.5" StartPoint="0,0.5" 
		ColorInterpolationMode="ScRgbLinearInterpolation" 
		SpreadMethod="Reflect" >
		<GradientStop Color="Green" Offset="0.775" />
		<GradientStop Color="White" Offset="1" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="VerticalDownBarValueGradientBackground" EndPoint="1,0.5" StartPoint="0,0.5" 
		ColorInterpolationMode="ScRgbLinearInterpolation" 
		SpreadMethod="Reflect" >
		<GradientStop Color="Red" Offset="0.775" />
		<GradientStop Color="White" Offset="1" />
	</LinearGradientBrush>

	<!-- ******************** ContextMenu ********************-->
	<Style x:Key="ContextMenuItemStyle" TargetType="{x:Type MenuItem}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Margin" Value="-10,0,0,0" />
		<Setter Property="Width" Value="Auto" />
		<Setter Property="Background" Value="{StaticResource SolidBlackBrush}" />
		<Setter Property="Foreground" Value="{StaticResource SolidWhiteBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type MenuItem}">
					<Border BorderThickness="1" CornerRadius="4" BorderBrush="Black" x:Name="Border" Background="Black">
						<StackPanel ClipToBounds="True" Orientation="Vertical" IsItemsHost="True" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="Border" Property="Background" Value="Black" />
							<Setter Property="Background" Value="{StaticResource SolidBlackBrush}"/>
							<Setter Property="Foreground" Value="{StaticResource SolidWhiteBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ContextMenuStyle" TargetType="{x:Type ContextMenu}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Background" Value="{StaticResource SolidBlackBrush}"/>
		<Setter Property="Foreground" Value="{StaticResource SolidWhiteBrush}"/>
		<Setter Property="HasDropShadow" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ContextMenu}">
					<Border BorderThickness="1" CornerRadius="4" BorderBrush="Black" x:Name="Border" Background="Black">
						<StackPanel ClipToBounds="True" Orientation="Vertical" IsItemsHost="True" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="Border" Property="Background" Value="Black" />
							<Setter Property="Background" Value="{StaticResource SolidBlackBrush}"/>
							<Setter Property="Foreground" Value="{StaticResource SolidWhiteBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="CSContextMenuItemStyle" TargetType="{x:Type MenuItem}">
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Margin" Value="-20,0,0,0" />
		<Setter Property="Width" Value="Auto" />
		<Setter Property="Background" Value="{StaticResource SolidBlackBrush}" />
		<Setter Property="Foreground" Value="{StaticResource SolidWhiteBrush}" />
	</Style>

	<Style x:Key="CSContextMenuStyle" TargetType="{x:Type ContextMenu}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Margin" Value="0,0,0,0" />
		<Setter Property="Width" Value="Auto" />
		<Setter Property="Background" Value="{StaticResource SolidBlackBrush}"/>
		<Setter Property="Foreground" Value="{StaticResource SolidWhiteBrush}"/>
		<Setter Property="HasDropShadow" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ContextMenu}">
					<Border BorderThickness="0" CornerRadius="4" BorderBrush="Black" x:Name="Border" Background="Black">
						<StackPanel ClipToBounds="True" Orientation="Vertical" IsItemsHost="True" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="Border" Property="Background" Value="Black" />
							<Setter Property="Background" Value="{StaticResource SolidBlackBrush}"/>
							<Setter Property="Foreground" Value="{StaticResource SolidWhiteBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type ToolTip}" TargetType="ToolTip">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource Self}, Path=PlacementTarget.FontFamily}"/>
		<Setter Property="HasDropShadow" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToolTip">
					<Border Name="Border"
						BorderThickness="1"
						Width="{TemplateBinding Width}"
						Height="{TemplateBinding Height}">
						<Border.Background>
							<LinearGradientBrush StartPoint="0,0"
                                 EndPoint="0,1">
								<LinearGradientBrush.GradientStops>
									<GradientStopCollection>
										<GradientStop Color="#FF5A5A5A"
											Offset="0.0" />
										<GradientStop Color="#FF212021"
											Offset="1.0" />
									</GradientStopCollection>
								</LinearGradientBrush.GradientStops>
							</LinearGradientBrush>
						</Border.Background>
						<Border.BorderBrush>
							<SolidColorBrush Color="WhiteSmoke" />
						</Border.BorderBrush>
						<ContentPresenter Margin="4"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Top"
							/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="HasDropShadow" Value="true">
							<Setter TargetName="Border"
								Property="CornerRadius"
								Value="4" />
							<Setter TargetName="Border"
								Property="SnapsToDevicePixels"
								Value="true" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="TabItem">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TabItem">
					<Border Name="Border" BorderThickness="1,1,1,0" 
									BorderBrush="Gainsboro" CornerRadius="2,2,0,0" Margin="1,0">
						<ContentPresenter x:Name="ContentSite"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        ContentSource="Header"
                                        Margin="10,2"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="Border" Property="Background" Value="LightGreen" />
						</Trigger>
						<Trigger Property="IsSelected" Value="False">
							<Setter TargetName="Border" Property="Background" Value="GhostWhite" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ******************** Button ********************-->
	<Style x:Key="RoundedButtonStyle1" TargetType="{x:Type Button}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Foreground" Value="Black" />
		<Setter Property="FontWeight" Value="DemiBold" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Border CornerRadius="3" Background="LightCyan" BorderThickness=".5">
						<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ******************** ComboBox ********************-->
    <!-- ComboBox -->
    <Style x:Key="ComboBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2,2,21,2" SnapsToDevicePixels="true"
						Stroke="{StaticResource ComboBoxForegroundBrush}"
						StrokeThickness="1"
						StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


	<!-- ******************** Button ********************-->
	<!--<Style x:Key="ButtonStyle2" TargetType="{x:Type Button}" BasedOn="{StaticResource RoundedButtonStyle1}">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
		<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					--><!-- We use Grid as a root because it is easy to add more elements to customize the button --><!--
					<Grid x:Name="Grid">
						<Border x:Name="Border" Background="{TemplateBinding Background}"
								   BorderBrush="{TemplateBinding BorderBrush}"
								   BorderThickness="{TemplateBinding BorderThickness}"
								   Padding="{TemplateBinding Padding}"/>

						--><!-- Content Presenter is where the text content etc is placed by the control -->
						<!-- The bindings are useful so that the control can be parameterized without editing the template --><!--

						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    Margin="{TemplateBinding Padding}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    RecognizesAccessKey="True"/>
					</Grid>

					--><!--Each state sets a brush on the Border in the template --><!--
					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
						</Trigger>

						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="{DynamicResource MouseOverBrush}" TargetName="Border"/>
						</Trigger>

						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
						</Trigger>

						<Trigger Property="IsEnabled" Value="true"/>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
							<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
						</Trigger>

					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>-->

	<ControlTemplate x:Key="WindowTemplate" TargetType="{x:Type Window}">
		<Label Grid.Column="1" DockPanel.Dock="Left" Content="{TemplateBinding Property=Title}" Padding="3,0,0,0"                                                                                  
										HorizontalContentAlignment="Center"
										VerticalContentAlignment="Center"
										HorizontalAlignment="Stretch"
										VerticalAlignment="Stretch"
										Foreground="Black"                                           
										FontSize="16"
										>
		</Label>
	</ControlTemplate>

	<ControlTemplate x:Key="RemoveXButtonTemplate" TargetType="Button">
    <Border Width="18" Height="18" Background="#00000000" Margin="2,0,2,0">

<!-- YAYA
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="FocusStates">
          <VisualState x:Name="Unfocused"/>
          <VisualState x:Name="Focused"/>
        </VisualStateGroup>
        <VisualStateGroup x:Name="CommonStates">
          <VisualStateGroup.Transitions>
            <VisualTransition GeneratedDuration="00:00:00.1000000"/>
          </VisualStateGroup.Transitions>
          <VisualState x:Name="MouseOver">
            <Storyboard>
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="path1" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Normal"/>
          <VisualState x:Name="Pressed">
            <Storyboard>
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="path1" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Disabled"/>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
		-->
      <Grid RenderTransformOrigin="0.5,0.5">
        <Grid.RenderTransform>
          <TransformGroup>
            <ScaleTransform/>
            <SkewTransform/>
            <RotateTransform Angle="45"/>
            <TranslateTransform/>
          </TransformGroup>
        </Grid.RenderTransform>
        
        <Path x:Name="path1" Height="16" Width="16" RenderTransformOrigin="0.5,0.5" Fill="{x:Null}" Stretch="Fill" Stroke="#FF606060" StrokeThickness="1" Data="M7.5,1.5 L10.5,1.5 L10.5,7.5 L16.5,7.5 L16.5,10.5 L10.5,10.5 L10.5,16.5 L7.5,16.5 L7.5,10.5 L1.5,10.5 L1.5,7.5 L7.5,7.5 z" Margin="1,-1,1,3">
          <Path.RenderTransform>
            <TransformGroup>
              <ScaleTransform/>
              <SkewTransform/>
              <RotateTransform Angle="-90"/>
              <TranslateTransform Y="2" X="0"/>
            </TransformGroup>
          </Path.RenderTransform>
        </Path>
        
        <Path x:Name="path" Height="16" Width="16" RenderTransformOrigin="0.5,0.5" Stroke="#FFD60808" Fill="#FFD60808" Stretch="Fill" Data="M7.5,1.5 L10.5,1.5 L10.5,7.5 L16.5,7.5 L16.5,10.5 L10.5,10.5 L10.5,16.5 L7.5,16.5 L7.5,10.5 L1.5,10.5 L1.5,7.5 L7.5,7.5 z" Opacity="0" StrokeThickness="0" Margin="1,-1,1,3">
          <Path.RenderTransform>
            <TransformGroup>
              <ScaleTransform/>
              <SkewTransform/>
              <RotateTransform Angle="-90"/>
              <TranslateTransform Y="2" X="0"/>
            </TransformGroup>
          </Path.RenderTransform>
        </Path>
      </Grid>
    </Border>
  </ControlTemplate>

</ResourceDictionary>
